#ifndef PRODUCT_H
#define PRODUCT_H

#include <iostream>
#include <exception>
#include <string> 

class productException : public std::exception {
    private:
    std::string message;

    public:
      productException(std::string msg) {
          message = msg;
      }

      const char * what () {
          return message.c_str();
      }
};

class Product {
  private:
    std::string name;
    std::string brand;
    std::string type;
    std::string desc;
    float price;
    // Keys are not generated by hashing names
    // This allows products to have the same name but represent different physical objects
    std::string key;
    int quantity;
  
  public:
    // Constructors
    Product();
    Product(std::string, std::string, std::string, std::string, std::string, float, int);

    // Getters
    std::string getName();
    std::string getBrand();
    std::string getType();
    std::string getDesc();
    float getPrice();
    std::string getKey();
    int getQuantity();
  
    // Setters
    void setName(std::string name_);
    void setBrand(std::string brand_);
    void setType(std::string type_);
    void setDesc(std::string desc_); 
    void setPrice(float price_);  
    void setKey(std::string key_);
    void setQuantity(int quantity_);

    // Increase existing quantity
    void increase(int quantity_);
    void operator++();
    void operator+=(int quantity_);

    // Decrease existing quantity
    void decrease(int quantity_);
    void operator--();
    void operator-=(int quantity_);

    void print();
  };

// Default Constructor
Product::Product() {
  this -> name = "";
  this -> brand = "";
  this -> type = "";
  this -> desc = "";
  this -> price = 0.00;
  this -> key = "";
  this -> quantity = 0;
}

// Parametrized Constructor
Product::Product(std::string key_, std::string name_, std::string brand_, std::string type_, std::string desc_, float price_, int quantity_) {
  setName(name_);
  setBrand(brand_);
  setType(type_);
  setDesc(desc_);
  setPrice(price_);
  setKey(key_);
  setQuantity(quantity_);
}

// Getters
std::string Product::getName() {
  return this -> name;
}
  
std::string Product::getBrand() {
  return this -> brand;
}

std::string Product::getType() {
  return this -> type;
}
  
std::string Product::getDesc() {
  return this -> desc;
}
  
float Product::getPrice() {
  return this -> price;
}
  
std::string Product::getKey() {
  return this -> key;
}

int Product::getQuantity() {
  return this -> quantity;
}

// Setters
void Product::setName(std::string name_) {
  this -> name = name_;
}

void Product::setBrand(std::string brand_) {
  this -> brand = brand_;
}
  
void Product::setType(std::string type_) {
  this -> type = type_;
}
  
void Product::setDesc(std::string desc_) {
  this -> desc = desc_;
}
  
void Product::setPrice(float price_) {
  if (price_ >= 0)
    this -> price = price_;
  else
    throw productException("Price cannot be negative!\n");
}
  
void Product::setKey(std::string key_) {
  this -> key = key_;
}

void Product::setQuantity(int quantity_) {
  if (quantity_ >= 0)
    this -> quantity = quantity_;
  else 
    throw productException("Quantity cannot be negative!\n");
}

// Increment
void Product::increase(int quantity_) {
  if (quantity_ < 0) {
    throw productException("Quantity cannot be negative!\n");
  }

  this -> quantity += quantity_;
}

void Product::operator++() {
  this -> quantity++;
}

void Product::operator+=(int quantity_) {
  if (quantity_ < 0)
    throw productException("Quantity cannot be negative!\n");

  this -> quantity += quantity_;
}

// Decrement
void Product::decrease(int quantity_) {
  if (quantity_ < 0)
    throw productException("Invalid quantity\n");

  this -> quantity -= quantity_;
}

void Product::operator--() {
  this -> quantity--;
}

void Product::operator-=(int quantity_) {
  if (quantity_ < 0)
    throw productException("Invalid quantity\n");

  this -> quantity -= quantity_;
}

// Print method
void Product::print() {
  std::cout << "Name: " << name << std::endl;
  std::cout << "Brand: " << brand << std::endl;
  std::cout << "Type: " << type << std::endl;
  std::cout << "Desc: " << desc << std::endl;
  std::cout << "Price: $" << price << std::endl;
  std::cout << "key: " << key << std::endl;
  std::cout << "Quantity: " << (quantity == 0 ? "Sold out" : std::to_string(quantity)) << std::endl;
  std::cout << "——————————————————————" << std::endl;
}

#endif